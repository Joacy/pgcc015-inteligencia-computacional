# -*- coding: utf-8 -*-
"""epc01

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pYOPOYzlAXPwPcF6AN6u_9VMsCnpBA7G
"""

# Importando pandas 
import pandas as pd

# Importando dados de treinamento e dados de teste
dataset = pd.read_csv('https://raw.githubusercontent.com/Joacy/pgcc015-inteligencia-computacional/master/epc/epc01/dados.txt', sep=' ');
x_test = pd.read_csv('https://raw.githubusercontent.com/Joacy/pgcc015-inteligencia-computacional/master/epc/epc01/teste.txt', sep=' ');

# Separando entradas e saídas para o treinamento
x_train = dataset.iloc[:,0:4];

y_train = dataset.iloc[:,4:5];

# Função sinal

def sinal(u):
  return 1 if u >= 0 else -1

import numpy as np

cols = x_train.columns.size;
rows = int(x_train.size / cols);

# Inicialização do vetor de pesos
weights = np.random.rand(cols);

x = np.array(x_train);

y = np.array(y_train);

u = np.zeros((rows));

d = np.zeros((rows));

# Inicialização da taxa de aprendizado
eta = 0.01;

error = True;
while (error):
  i = 0;
  while i < rows:
    j = 0;
    while j < cols:
      u[i] += x[i][j] * weights[j];
      j = j + 1;
    d[i] = sinal(u[i]);
    
    if (d[i] != y[i]):
      k = 0
      while k < cols:
        weights[k] = weights[k] + eta*(d[i] - y[i])*x[i][k];
        k = k + 1;
      error = True;
      print(weights)
    i = i + 1;
  error = False

# Teste
rows = int(x_test.size / cols);
x_test = np.array(x_test);
y_test = np.zeros(rows);

i = 0;
while i < rows:
  j = 0;
  while j < cols:
    y_test[i] += x_test[i][j] * weights[j];
    j = j + 1;
  if (sinal(y_test[i]) == 1):
    print('O óleo pertence a classe C2');
  else:
    print('O óleo pertence a classe C1');
  i = i + 1;