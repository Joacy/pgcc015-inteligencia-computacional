# -*- coding: utf-8 -*-
"""epc06.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q7_8MQdn8ecRrPF4PNNVxGf7YuWRzxox
"""

pip install -U scikit-fuzzy

# Importando numpy
import numpy as np

# Importando pandas 
import pandas as pd

# Importando skfuzzy
import skfuzzy as fuzz

# Importando `pyplot` de `matplotlib`
from matplotlib import pyplot as plt

def generate_empty_matrix(rows, cols):
  matrix = [];
  for i in range(rows):
    line = [];
    for j in range(cols):
      line.append(np.zeros(1)[0]);
    matrix.append(line);
  return matrix;

def score_rules(rules):
  score = []
  for i in range(len(rules)):
    score.append(rules[i][0]['interp_membership']*rules[i][1]['interp_membership']*rules[i][2]['interp_membership']*rules[i][3]['interp_membership'])
  return score

def delete_conflict(rules):
  min_membership = set()
  score = score_rules(rules)
  rules_without_conflict = []

  for i in range(len(rules) - 1):
    for j in range(i + 1, len(rules)):
      if (rules[i][0]['region'] == rules[j][0]['region']) and (rules[i][1]['region'] == rules[j][1]['region']) and (rules[i][2]['region'] == rules[j][2]['region']) and (rules[i][3]['region'] == rules[j][3]['region']) and (rules[i][4]['classe'] != rules[j][4]['classe']):
        if (score[i] > score[j]):
          min_membership.add(j)
        else:
          min_membership.add(i)

  for i in range(len(rules)):
    if not (i in min_membership):
      rules_without_conflict.append(rules[i])

  return rules_without_conflict

def filter_rules(rules):
  class1 = set()
  class2 = set()
  class3 = set()
  
  for i in range(len(rules)):
    if rules[i][4]['classe'] == 1:
      class1.add(f"{rules[i][0]['region']}{rules[i][1]['region']}{rules[i][2]['region']}{rules[i][3]['region']}")
    elif rules[i][4]['classe'] == 2:
      class2.add(f"{rules[i][0]['region']}{rules[i][1]['region']}{rules[i][2]['region']}{rules[i][3]['region']}")
    elif rules[i][4]['classe'] == 3:
      class3.add(f"{rules[i][0]['region']}{rules[i][1]['region']}{rules[i][2]['region']}{rules[i][3]['region']}")
  
  final_rules = []
  for el in class1:
    rule = ''
    for i in range(len(el)):
      if i == 0:
        if el[i] == '1':
          rule = "Se SepalLength é small & "
        elif el[i] == '2':
          rule = f"Se SepalLength é medium & "
        elif el[i] == '3':
          rule = "Se SepalLength é big & "
      elif i == 1:
        if el[i] == '1':
          rule += "SepalWidth é small & "
        elif el[i] == '2':
          rule += "SepalWidth é medium & "
        elif el[i] == '3':
          rule += "SepalWidth é big & "
      elif i == 2:
        if el[i] == '1':
          rule += "PetalLength é small & "
        elif el[i] == '2':
          rule += "PetalLength é medium & "
        elif el[i] == '3':
          rule += "PetalLength é big & "
      elif i == 3:
        if el[i] == '1':
          rule += "PetalWidth é small, "
        elif el[i] == '2':
          rule += "PetalWidth é medium, "
        elif el[i] == '3':
          rule += "PetalWidth é big, "
    rule += "Então a planta é Iris-setosa"
    final_rules.append(rule)

  for el in class2:
    rule = ''
    for i in range(len(el)):
      if i == 0:
        if el[i] == '1':
          rule = "Se SepalLength é small & "
        elif el[i] == '2':
          rule = "Se SepalLength é medium & "
        elif el[i] == '3':
          rule = "Se SepalLength é big & "
      if i == 1:
        if el[i] == '1':
          rule += "SepalWidth é small & "
        elif el[i] == '2':
          rule += "SepalWidth é medium & "
        elif el[i] == '3':
          rule += "SepalWidth é big && "
      if i == 2:
        if el[i] == '1':
          rule += "PetalLength é small & "
        elif el[i] == '2':
          rule += "PetalLength é medium & "
        elif el[i] == '3':
          rule += "PetalLength é big & "
      if i == 3:
        if el[i] == '1':
          rule += "PetalWidth é small, "
        elif el[i] == '2':
          rule += "PetalWidth é medium, "
        elif el[i] == '3':
          rule += "PetalWidth é big, "
    rule += "Então a planta é Iris-versicolor"
    final_rules.append(rule)
     
  for el in class3:
    rule = ''
    for i in range(len(el)):
      if i == 0:
        if el[i] == '1':
          rule = "Se SepalLength é small & "
        elif el[i] == '2':
          rule = "Se SepalLength é medium & "
        elif el[i] == '3':
          rule = "Se SepalLength é big & "
      elif i == 1:
        if el[i] == '1':
          rule += "SepalWidth é small & "
        elif el[i] == '2':
          rule += "SepalWidth é medium & "
        elif el[i] == '3':
          rule += "SepalWidth é big & "
      elif i == 2:
        if el[i] == '1':
          rule += "PetalLength é small & "
        elif el[i] == '2':
          rule += "PetalLength é medium & "
        elif el[i] == '3':
          rule += "PetalLength é big & "
      elif i == 3:
        if el[i] == '1':
          rule += "PetalWidth é small, "
        elif el[i] == '2':
          rule += "PetalWidth é medium, "
        elif el[i] == '3':
          rule += "PetalWidth é big, "
    rule += "Então a planta é Iris-virginica"
    final_rules.append(rule)

  return final_rules

def wang_mendel(input_train_data, output_train_data):
  min_sl = min(x_train[:,0])
  max_sl = max(x_train[:,0])
  sepal_length = np.linspace(min_sl, max_sl, 500)

  sl_sm = fuzz.trapmf(sepal_length, [min_sl, min_sl, min_sl + (max_sl-min_sl)/4, min_sl + (max_sl-min_sl)/2])
  sl_me = fuzz.trimf(sepal_length, [min_sl + (max_sl-min_sl)/4, min_sl + (max_sl-min_sl)/2, min_sl + 3*(max_sl-min_sl)/4])
  sl_bi = fuzz.trapmf(sepal_length, [min_sl + (max_sl-min_sl)/2, min_sl + 3*(max_sl-min_sl)/4, max_sl, max_sl])

  # sl_sm = fuzz.trimf(sepal_length, [min_sl, min_sl, min_sl + (max_sl-min_sl)/2])
  # sl_me = fuzz.trimf(sepal_length, [min_sl + (max_sl-min_sl)/4, min_sl + (max_sl-min_sl)/2, min_sl + 3*(max_sl-min_sl)/4])
  # sl_bi = fuzz.trimf(sepal_length, [min_sl + (max_sl-min_sl)/2, max_sl, max_sl])

  min_sw = min(x_train[:,1])
  max_sw = max(x_train[:,1])
  sepal_width = np.linspace(min_sw, max_sw, 500)

  sw_sm = fuzz.trapmf(sepal_width, [min_sw, min_sw, min_sw + (max_sw-min_sw)/4, min_sw + (max_sw-min_sw)/2])
  sw_me = fuzz.trimf(sepal_width, [min_sw + (max_sw-min_sw)/4, min_sw + (max_sw-min_sw)/2, min_sw + 3*(max_sw-min_sw)/4])
  sw_bi = fuzz.trapmf(sepal_width, [min_sw + (max_sw-min_sw)/2, min_sw + 3*(max_sw-min_sw)/4, max_sw, max_sw])

  # sw_sm = fuzz.trimf(sepal_width, [min_sw, min_sw, min_sw + (max_sw-min_sw)/2])
  # sw_me = fuzz.trimf(sepal_width, [min_sw + (max_sw-min_sw)/4, min_sw + (max_sw-min_sw)/2, min_sw + 3*(max_sw-min_sw)/4])
  # sw_bi = fuzz.trimf(sepal_width, [min_sw + (max_sw-min_sw)/2, max_sw, max_sw])

  min_pl = min(x_train[:,2])
  max_pl = max(x_train[:,2])
  petal_length = np.linspace(min_pl, max_pl, 500)

  pl_sm = fuzz.trapmf(petal_length, [min_pl, min_pl, min_pl + (max_pl-min_pl)/4, min_pl + (max_pl-min_pl)/2])
  pl_me = fuzz.trimf(petal_length, [min_pl + (max_pl-min_pl)/4, min_pl + (max_pl-min_pl)/2, min_pl + 3*(max_pl-min_pl)/4])
  pl_bi = fuzz.trapmf(petal_length, [min_pl + (max_pl-min_pl)/2, min_pl + 3*(max_pl-min_pl)/4, max_pl, max_pl])
  
  # pl_sm = fuzz.trimf(petal_length, [min_pl, min_pl, min_pl + (max_pl-min_pl)/2])
  # pl_me = fuzz.trimf(petal_length, [min_pl + (max_pl-min_pl)/4, min_pl + (max_pl-min_pl)/2, min_pl + 3*(max_pl-min_pl)/4])
  # pl_bi = fuzz.trimf(petal_length, [min_pl + (max_pl-min_pl)/2, max_pl, max_pl])

  min_pw = min(x_train[:,3])
  max_pw = max(x_train[:,3])
  petal_width = np.linspace(min_pw, max_pw, 500)

  pw_sm = fuzz.trapmf(petal_width, [min_pw, min_pw, min_pw + (max_pw-min_pw)/4, min_pw + (max_pw-min_pw)/2])
  pw_me = fuzz.trimf(petal_width, [min_pw + (max_pw-min_pw)/4, min_pw + (max_pw-min_pw)/2, min_pw + 3*(max_pw-min_pw)/4])
  pw_bi = fuzz.trapmf(petal_width, [min_pw + (max_pw-min_pw)/2, min_pw + 3*(max_pw-min_pw)/4, max_pw, max_pw])

  # pw_sm = fuzz.trimf(petal_width, [min_pw, min_pw, min_pw + (max_pw-min_pw)/2])
  # pw_me = fuzz.trimf(petal_width, [min_pw + (max_pw-min_pw)/4, min_pw + (max_pw-min_pw)/2, min_pw + 3*(max_pw-min_pw)/4])
  # pw_bi = fuzz.trimf(petal_width, [min_pw + (max_pw-min_pw)/2, max_pw, max_pw])

  # # Visualizando universos
  # fig, (ax0, ax1, ax2, ax3) = plt.subplots(nrows=4, figsize=(8, 9))

  # ax0.plot(sepal_length, sl_sm, 'b', linewidth=1.5, label='Small')
  # ax0.plot(sepal_length, sl_me, 'g', linewidth=1.5, label='Medium')
  # ax0.plot(sepal_length, sl_bi, 'r', linewidth=1.5, label='Big')
  # ax0.set_title('Sepal Length')
  # ax0.legend()

  # ax1.plot(sepal_width, sw_sm, 'b', linewidth=1.5, label='Small')
  # ax1.plot(sepal_width, sw_me, 'g', linewidth=1.5, label='Medium')
  # ax1.plot(sepal_width, sw_bi, 'r', linewidth=1.5, label='Big')
  # ax1.set_title('Sepal Width')
  # ax1.legend()

  # ax2.plot(petal_length, pl_sm, 'b', linewidth=1.5, label='Small')
  # ax2.plot(petal_length, pl_me, 'g', linewidth=1.5, label='Medium')
  # ax2.plot(petal_length, pl_bi, 'r', linewidth=1.5, label='Big')
  # ax2.set_title('Petal Length')
  # ax2.legend()

  # ax3.plot(petal_width, pw_sm, 'b', linewidth=1.5, label='Small')
  # ax3.plot(petal_width, pw_me, 'g', linewidth=1.5, label='Medium')
  # ax3.plot(petal_width, pw_bi, 'r', linewidth=1.5, label='Big')
  # ax3.set_title('Petal Width')
  # ax3.legend()

  # for ax in (ax0, ax1, ax2, ax3):
  #     ax.spines['top'].set_visible(False)
  #     ax.spines['right'].set_visible(False)
  #     ax.get_xaxis().tick_bottom()
  #     ax.get_yaxis().tick_left()

  # plt.tight_layout()
  
  rules = generate_empty_matrix(input_train_data.shape[0], 0)

  for sample in range(input_train_data.shape[0]):
    sl_small = fuzz.interp_membership(sepal_length, sl_sm, input_train_data[sample][0])
    sl_medium = fuzz.interp_membership(sepal_length, sl_me, input_train_data[sample][0])
    sl_big = fuzz.interp_membership(sepal_length, sl_bi, input_train_data[sample][0])
    
    sw_small = fuzz.interp_membership(sepal_width, sw_sm, input_train_data[sample][1])
    sw_medium = fuzz.interp_membership(sepal_width, sw_me, input_train_data[sample][1])
    sw_big = fuzz.interp_membership(sepal_width, sw_bi, input_train_data[sample][1])
    
    pl_small = fuzz.interp_membership(petal_length, pl_sm, input_train_data[sample][2])
    pl_medium = fuzz.interp_membership(petal_length, pl_me, input_train_data[sample][2])
    pl_big = fuzz.interp_membership(petal_length, pl_bi, input_train_data[sample][2])
    
    pw_small = fuzz.interp_membership(petal_width, sl_sm, input_train_data[sample][3])
    pw_medium = fuzz.interp_membership(petal_width, sl_me, input_train_data[sample][3])
    pw_big = fuzz.interp_membership(petal_width, sl_bi, input_train_data[sample][3])
    
    if sl_small > sl_medium and sl_small > sl_big:
      if sw_small > sw_medium and sw_small > sw_big:
        if pl_small > pl_medium and pl_small > pl_big:
          if pw_small > pw_medium and pw_small > pw_big:
            rules[sample].append({'region': 1, 'interp_membership': sl_small})
            rules[sample].append({'region': 1, 'interp_membership': sw_small})
            rules[sample].append({'region': 1, 'interp_membership': pl_small})
            rules[sample].append({'region': 1, 'interp_membership': pw_small})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_medium > pw_small and pw_medium > pw_big:
            rules[sample].append({'region': 1, 'interp_membership': sl_small})
            rules[sample].append({'region': 1, 'interp_membership': sw_small})
            rules[sample].append({'region': 1, 'interp_membership': pl_small})
            rules[sample].append({'region': 2, 'interp_membership': pw_medium})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_big > pw_small and pw_big > pw_medium:
            rules[sample].append({'region': 1, 'interp_membership': sl_small})
            rules[sample].append({'region': 1, 'interp_membership': sw_small})
            rules[sample].append({'region': 1, 'interp_membership': pl_small})
            rules[sample].append({'region': 3, 'interp_membership': pw_big})
            rules[sample].append({'classe': output_train_data[sample]})
        elif pl_medium > pl_small and pl_medium > pl_big:
          if pw_small > pw_medium and pw_small > pw_big:
            rules[sample].append({'region': 1, 'interp_membership': sl_small})
            rules[sample].append({'region': 1, 'interp_membership': sw_small})
            rules[sample].append({'region': 2, 'interp_membership': pl_medium})
            rules[sample].append({'region': 1, 'interp_membership': pw_small})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_medium > pw_small and pw_medium > pw_big:
            rules[sample].append({'region': 1, 'interp_membership': sl_small})
            rules[sample].append({'region': 1, 'interp_membership': sw_small})
            rules[sample].append({'region': 2, 'interp_membership': pl_medium})
            rules[sample].append({'region': 2, 'interp_membership': pw_medium})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_big > pw_small and pw_big > pw_medium:
            rules[sample].append({'region': 1, 'interp_membership': sl_small})
            rules[sample].append({'region': 1, 'interp_membership': sw_small})
            rules[sample].append({'region': 2, 'interp_membership': pl_medium})
            rules[sample].append({'region': 3, 'interp_membership': pw_big})
            rules[sample].append({'classe': output_train_data[sample]})
        elif pl_big > pl_medium and pl_big > pl_small:
          if pw_small > pw_medium and pw_small > pw_big:
            rules[sample].append({'region': 1, 'interp_membership': sl_small})
            rules[sample].append({'region': 1, 'interp_membership': sw_small})
            rules[sample].append({'region': 3, 'interp_membership': pl_big})
            rules[sample].append({'region': 1, 'interp_membership': pw_small})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_medium > pw_small and pw_medium > pw_big:
            rules[sample].append({'region': 1, 'interp_membership': sl_small})
            rules[sample].append({'region': 1, 'interp_membership': sw_small})
            rules[sample].append({'region': 3, 'interp_membership': pl_big})
            rules[sample].append({'region': 2, 'interp_membership': pw_medium})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_big > pw_small and pw_big > pw_medium:
            rules[sample].append({'region': 1, 'interp_membership': sl_small})
            rules[sample].append({'region': 1, 'interp_membership': sw_small})
            rules[sample].append({'region': 3, 'interp_membership': pl_big})
            rules[sample].append({'region': 3, 'interp_membership': pw_big})
            rules[sample].append({'classe': output_train_data[sample]})
      elif sw_medium > sw_small and sw_medium > sw_big:
        if pl_small > pl_medium and pl_small > pl_big:
          if pw_small > pw_medium and pw_small > pw_big:
            rules[sample].append({'region': 1, 'interp_membership': sl_small})
            rules[sample].append({'region': 2, 'interp_membership': sw_medium})
            rules[sample].append({'region': 1, 'interp_membership': pl_small})
            rules[sample].append({'region': 1, 'interp_membership': pw_small})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_medium > pw_small and pw_medium > pw_big:
            rules[sample].append({'region': 1, 'interp_membership': sl_small})
            rules[sample].append({'region': 2, 'interp_membership': sw_medium})
            rules[sample].append({'region': 1, 'interp_membership': pl_small})
            rules[sample].append({'region': 2, 'interp_membership': pw_medium})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_big > pw_small and pw_big > pw_medium:
            rules[sample].append({'region': 1, 'interp_membership': sl_small})
            rules[sample].append({'region': 2, 'interp_membership': sw_medium})
            rules[sample].append({'region': 1, 'interp_membership': pl_small})
            rules[sample].append({'region': 3, 'interp_membership': pw_big})
            rules[sample].append({'classe': output_train_data[sample]})
        elif pl_medium > pl_small and pl_medium > pl_big:
          if pw_small > pw_medium and pw_small > pw_big:
            rules[sample].append({'region': 1, 'interp_membership': sl_small})
            rules[sample].append({'region': 2, 'interp_membership': sw_medium})
            rules[sample].append({'region': 2, 'interp_membership': pl_medium})
            rules[sample].append({'region': 1, 'interp_membership': pw_small})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_medium > pw_small and pw_medium > pw_big:
            rules[sample].append({'region': 1, 'interp_membership': sl_small})
            rules[sample].append({'region': 2, 'interp_membership': sw_medium})
            rules[sample].append({'region': 2, 'interp_membership': pl_medium})
            rules[sample].append({'region': 2, 'interp_membership': pw_medium})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_big > pw_small and pw_big > pw_medium:
            rules[sample].append({'region': 1, 'interp_membership': sl_small})
            rules[sample].append({'region': 2, 'interp_membership': sw_medium})
            rules[sample].append({'region': 2, 'interp_membership': pl_medium})
            rules[sample].append({'region': 3, 'interp_membership': pw_big})
            rules[sample].append({'classe': output_train_data[sample]})
        elif pl_big > pl_medium and pl_big > pl_small:
          if pw_small > pw_medium and pw_small > pw_big:
            rules[sample].append({'region': 1, 'interp_membership': sl_small})
            rules[sample].append({'region': 2, 'interp_membership': sw_medium})
            rules[sample].append({'region': 3, 'interp_membership': pl_big})
            rules[sample].append({'region': 1, 'interp_membership': pw_small})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_medium > pw_small and pw_medium > pw_big:
            rules[sample].append({'region': 1, 'interp_membership': sl_small})
            rules[sample].append({'region': 2, 'interp_membership': sw_medium})
            rules[sample].append({'region': 3, 'interp_membership': pl_big})
            rules[sample].append({'region': 2, 'interp_membership': pw_medium})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_big > pw_small and pw_big > pw_medium:
            rules[sample].append({'region': 1, 'interp_membership': sl_small})
            rules[sample].append({'region': 2, 'interp_membership': sw_medium})
            rules[sample].append({'region': 3, 'interp_membership': pl_big})
            rules[sample].append({'region': 3, 'interp_membership': pw_big})
            rules[sample].append({'classe': output_train_data[sample]})
      elif sw_big > sw_small and sw_big > sw_medium:
        if pl_small > pl_medium and pl_small > pl_big:
          if pw_small > pw_medium and pw_small > pw_big:
            rules[sample].append({'region': 1, 'interp_membership': sl_small})
            rules[sample].append({'region': 3, 'interp_membership': sw_big})
            rules[sample].append({'region': 1, 'interp_membership': pl_small})
            rules[sample].append({'region': 1, 'interp_membership': pw_small})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_medium > pw_small and pw_medium > pw_big:
            rules[sample].append({'region': 1, 'interp_membership': sl_small})
            rules[sample].append({'region': 3, 'interp_membership': sw_big})
            rules[sample].append({'region': 1, 'interp_membership': pl_small})
            rules[sample].append({'region': 2, 'interp_membership': pw_medium})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_big > pw_small and pw_big > pw_medium:
            rules[sample].append({'region': 1, 'interp_membership': sl_small})
            rules[sample].append({'region': 3, 'interp_membership': sw_big})
            rules[sample].append({'region': 1, 'interp_membership': pl_small})
            rules[sample].append({'region': 3, 'interp_membership': pw_big})
            rules[sample].append({'classe': output_train_data[sample]})
        elif pl_medium > pl_small and pl_medium > pl_big:
          if pw_small > pw_medium and pw_small > pw_big:
            rules[sample].append({'region': 1, 'interp_membership': sl_small})
            rules[sample].append({'region': 3, 'interp_membership': sw_big})
            rules[sample].append({'region': 2, 'interp_membership': pl_medium})
            rules[sample].append({'region': 1, 'interp_membership': pw_small})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_medium > pw_small and pw_medium > pw_big:
            rules[sample].append({'region': 1, 'interp_membership': sl_small})
            rules[sample].append({'region': 3, 'interp_membership': sw_big})
            rules[sample].append({'region': 2, 'interp_membership': pl_medium})
            rules[sample].append({'region': 2, 'interp_membership': pw_medium})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_big > pw_small and pw_big > pw_medium:
            rules[sample].append({'region': 1, 'interp_membership': sl_small})
            rules[sample].append({'region': 3, 'interp_membership': sw_big})
            rules[sample].append({'region': 2, 'interp_membership': pl_medium})
            rules[sample].append({'region': 3, 'interp_membership': pw_big})
            rules[sample].append({'classe': output_train_data[sample]})
        elif pl_big > pl_medium and pl_big > pl_small:
          if pw_small > pw_medium and pw_small > pw_big:
            rules[sample].append({'region': 1, 'interp_membership': sl_small})
            rules[sample].append({'region': 3, 'interp_membership': sw_big})
            rules[sample].append({'region': 3, 'interp_membership': pl_big})
            rules[sample].append({'region': 1, 'interp_membership': pw_small})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_medium > pw_small and pw_medium > pw_big:
            rules[sample].append({'region': 1, 'interp_membership': sl_small})
            rules[sample].append({'region': 3, 'interp_membership': sw_big})
            rules[sample].append({'region': 3, 'interp_membership': pl_big})
            rules[sample].append({'region': 2, 'interp_membership': pw_medium})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_big > pw_small and pw_big > pw_medium:
            rules[sample].append({'region': 1, 'interp_membership': sl_small})
            rules[sample].append({'region': 3, 'interp_membership': sw_big})
            rules[sample].append({'region': 3, 'interp_membership': pl_big})
            rules[sample].append({'region': 3, 'interp_membership': pw_big})
            rules[sample].append({'classe': output_train_data[sample]})
    elif sl_medium > sl_small and sl_medium > sl_big:
      if sw_small > sw_medium and sw_small > sw_big:
        if pl_small > pl_medium and pl_small > pl_big:
          if pw_small > pw_medium and pw_small > pw_big:
            rules[sample].append({'region': 2, 'interp_membership': sl_medium})
            rules[sample].append({'region': 1, 'interp_membership': sw_small})
            rules[sample].append({'region': 1, 'interp_membership': pl_small})
            rules[sample].append({'region': 1, 'interp_membership': pw_small})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_medium > pw_small and pw_medium > pw_big:
            rules[sample].append({'region': 2, 'interp_membership': sl_medium})
            rules[sample].append({'region': 1, 'interp_membership': sw_small})
            rules[sample].append({'region': 1, 'interp_membership': pl_small})
            rules[sample].append({'region': 2, 'interp_membership': pw_medium})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_big > pw_small and pw_big > pw_medium:
            rules[sample].append({'region': 2, 'interp_membership': sl_medium})
            rules[sample].append({'region': 1, 'interp_membership': sw_small})
            rules[sample].append({'region': 1, 'interp_membership': pl_small})
            rules[sample].append({'region': 3, 'interp_membership': pw_big})
            rules[sample].append({'classe': output_train_data[sample]})
        elif pl_medium > pl_small and pl_medium > pl_big:
          if pw_small > pw_medium and pw_small > pw_big:
            rules[sample].append({'region': 2, 'interp_membership': sl_medium})
            rules[sample].append({'region': 1, 'interp_membership': sw_small})
            rules[sample].append({'region': 2, 'interp_membership': pl_medium})
            rules[sample].append({'region': 1, 'interp_membership': pw_small})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_medium > pw_small and pw_medium > pw_big:
            rules[sample].append({'region': 2, 'interp_membership': sl_medium})
            rules[sample].append({'region': 1, 'interp_membership': sw_small})
            rules[sample].append({'region': 2, 'interp_membership': pl_medium})
            rules[sample].append({'region': 2, 'interp_membership': pw_medium})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_big > pw_small and pw_big > pw_medium:
            rules[sample].append({'region': 2, 'interp_membership': sl_medium})
            rules[sample].append({'region': 1, 'interp_membership': sw_small})
            rules[sample].append({'region': 2, 'interp_membership': pl_medium})
            rules[sample].append({'region': 3, 'interp_membership': pw_big})
            rules[sample].append({'classe': output_train_data[sample]})
        elif pl_big > pl_medium and pl_big > pl_small:
          if pw_small > pw_medium and pw_small > pw_big:
            rules[sample].append({'region': 2, 'interp_membership': sl_medium})
            rules[sample].append({'region': 1, 'interp_membership': sw_small})
            rules[sample].append({'region': 3, 'interp_membership': pl_big})
            rules[sample].append({'region': 1, 'interp_membership': pw_small})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_medium > pw_small and pw_medium > pw_big:
            rules[sample].append({'region': 2, 'interp_membership': sl_medium})
            rules[sample].append({'region': 1, 'interp_membership': sw_small})
            rules[sample].append({'region': 3, 'interp_membership': pl_big})
            rules[sample].append({'region': 2, 'interp_membership': pw_medium})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_big > pw_small and pw_big > pw_medium:
            rules[sample].append({'region': 2, 'interp_membership': sl_medium})
            rules[sample].append({'region': 1, 'interp_membership': sw_small})
            rules[sample].append({'region': 3, 'interp_membership': pl_big})
            rules[sample].append({'region': 3, 'interp_membership': pw_big})
            rules[sample].append({'classe': output_train_data[sample]})
      elif sw_medium > sw_small and sw_medium > sw_big:
        if pl_small > pl_medium and pl_small > pl_big:
          if pw_small > pw_medium and pw_small > pw_big:
            rules[sample].append({'region': 2, 'interp_membership': sl_medium})
            rules[sample].append({'region': 2, 'interp_membership': sw_medium})
            rules[sample].append({'region': 1, 'interp_membership': pl_small})
            rules[sample].append({'region': 1, 'interp_membership': pw_small})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_medium > pw_small and pw_medium > pw_big:
            rules[sample].append({'region': 2, 'interp_membership': sl_medium})
            rules[sample].append({'region': 2, 'interp_membership': sw_medium})
            rules[sample].append({'region': 1, 'interp_membership': pl_small})
            rules[sample].append({'region': 2, 'interp_membership': pw_medium})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_big > pw_small and pw_big > pw_medium:
            rules[sample].append({'region': 2, 'interp_membership': sl_medium})
            rules[sample].append({'region': 2, 'interp_membership': sw_medium})
            rules[sample].append({'region': 1, 'interp_membership': pl_small})
            rules[sample].append({'region': 3, 'interp_membership': pw_big})
            rules[sample].append({'classe': output_train_data[sample]})
        elif pl_medium > pl_small and pl_medium > pl_big:
          if pw_small > pw_medium and pw_small > pw_big:
            rules[sample].append({'region': 2, 'interp_membership': sl_medium})
            rules[sample].append({'region': 2, 'interp_membership': sw_medium})
            rules[sample].append({'region': 2, 'interp_membership': pl_medium})
            rules[sample].append({'region': 1, 'interp_membership': pw_small})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_medium > pw_small and pw_medium > pw_big:
            rules[sample].append({'region': 2, 'interp_membership': sl_medium})
            rules[sample].append({'region': 2, 'interp_membership': sw_medium})
            rules[sample].append({'region': 2, 'interp_membership': pl_medium})
            rules[sample].append({'region': 2, 'interp_membership': pw_medium})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_big > pw_small and pw_big > pw_medium:
            rules[sample].append({'region': 2, 'interp_membership': sl_medium})
            rules[sample].append({'region': 2, 'interp_membership': sw_medium})
            rules[sample].append({'region': 2, 'interp_membership': pl_medium})
            rules[sample].append({'region': 3, 'interp_membership': pw_big})
            rules[sample].append({'classe': output_train_data[sample]})
        elif pl_big > pl_medium and pl_big > pl_small:
          if pw_small > pw_medium and pw_small > pw_big:
            rules[sample].append({'region': 2, 'interp_membership': sl_medium})
            rules[sample].append({'region': 2, 'interp_membership': sw_medium})
            rules[sample].append({'region': 3, 'interp_membership': pl_big})
            rules[sample].append({'region': 1, 'interp_membership': pw_small})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_medium > pw_small and pw_medium > pw_big:
            rules[sample].append({'region': 2, 'interp_membership': sl_medium})
            rules[sample].append({'region': 2, 'interp_membership': sw_medium})
            rules[sample].append({'region': 3, 'interp_membership': pl_big})
            rules[sample].append({'region': 2, 'interp_membership': pw_medium})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_big > pw_small and pw_big > pw_medium:
            rules[sample].append({'region': 2, 'interp_membership': sl_medium})
            rules[sample].append({'region': 2, 'interp_membership': sw_medium})
            rules[sample].append({'region': 3, 'interp_membership': pl_big})
            rules[sample].append({'region': 3, 'interp_membership': pw_big})
            rules[sample].append({'classe': output_train_data[sample]})
      elif sw_big > sw_small and sw_big > sw_medium:
        if pl_small > pl_medium and pl_small > pl_big:
          if pw_small > pw_medium and pw_small > pw_big:
            rules[sample].append({'region': 2, 'interp_membership': sl_medium})
            rules[sample].append({'region': 3, 'interp_membership': sw_big})
            rules[sample].append({'region': 1, 'interp_membership': pl_small})
            rules[sample].append({'region': 1, 'interp_membership': pw_small})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_medium > pw_small and pw_medium > pw_big:
            rules[sample].append({'region': 2, 'interp_membership': sl_medium})
            rules[sample].append({'region': 3, 'interp_membership': sw_big})
            rules[sample].append({'region': 1, 'interp_membership': pl_small})
            rules[sample].append({'region': 2, 'interp_membership': pw_medium})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_big > pw_small and pw_big > pw_medium:
            rules[sample].append({'region': 2, 'interp_membership': sl_medium})
            rules[sample].append({'region': 3, 'interp_membership': sw_big})
            rules[sample].append({'region': 1, 'interp_membership': pl_small})
            rules[sample].append({'region': 3, 'interp_membership': pw_big})
            rules[sample].append({'classe': output_train_data[sample]})
        elif pl_medium > pl_small and pl_medium > pl_big:
          if pw_small > pw_medium and pw_small > pw_big:
            rules[sample].append({'region': 2, 'interp_membership': sl_medium})
            rules[sample].append({'region': 3, 'interp_membership': sw_big})
            rules[sample].append({'region': 2, 'interp_membership': pl_medium})
            rules[sample].append({'region': 1, 'interp_membership': pw_small})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_medium > pw_small and pw_medium > pw_big:
            rules[sample].append({'region': 2, 'interp_membership': sl_medium})
            rules[sample].append({'region': 3, 'interp_membership': sw_big})
            rules[sample].append({'region': 2, 'interp_membership': pl_medium})
            rules[sample].append({'region': 2, 'interp_membership': pw_medium})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_big > pw_small and pw_big > pw_medium:
            rules[sample].append({'region': 2, 'interp_membership': sl_medium})
            rules[sample].append({'region': 3, 'interp_membership': sw_big})
            rules[sample].append({'region': 2, 'interp_membership': pl_medium})
            rules[sample].append({'region': 3, 'interp_membership': pw_big})
            rules[sample].append({'classe': output_train_data[sample]})
        elif pl_big > pl_medium and pl_big > pl_small:
          if pw_small > pw_medium and pw_small > pw_big:
            rules[sample].append({'region': 2, 'interp_membership': sl_medium})
            rules[sample].append({'region': 3, 'interp_membership': sw_big})
            rules[sample].append({'region': 3, 'interp_membership': pl_big})
            rules[sample].append({'region': 1, 'interp_membership': pw_small})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_medium > pw_small and pw_medium > pw_big:
            rules[sample].append({'region': 2, 'interp_membership': sl_medium})
            rules[sample].append({'region': 3, 'interp_membership': sw_big})
            rules[sample].append({'region': 3, 'interp_membership': pl_big})
            rules[sample].append({'region': 2, 'interp_membership': pw_medium})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_big > pw_small and pw_big > pw_medium:
            rules[sample].append({'region': 2, 'interp_membership': sl_medium})
            rules[sample].append({'region': 3, 'interp_membership': sw_big})
            rules[sample].append({'region': 3, 'interp_membership': pl_big})
            rules[sample].append({'region': 3, 'interp_membership': pw_big})
            rules[sample].append({'classe': output_train_data[sample]})
    elif sl_big > sl_small and sl_big > sl_medium:
      if sw_small > sw_medium and sw_small > sw_big:
        if pl_small > pl_medium and pl_small > pl_big:
          if pw_small > pw_medium and pw_small > pw_big:
            rules[sample].append({'region': 3, 'interp_membership': sl_big})
            rules[sample].append({'region': 1, 'interp_membership': sw_small})
            rules[sample].append({'region': 1, 'interp_membership': pl_small})
            rules[sample].append({'region': 1, 'interp_membership': pw_small})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_medium > pw_small and pw_medium > pw_big:
            rules[sample].append({'region': 3, 'interp_membership': sl_big})
            rules[sample].append({'region': 1, 'interp_membership': sw_small})
            rules[sample].append({'region': 1, 'interp_membership': pl_small})
            rules[sample].append({'region': 2, 'interp_membership': pw_medium})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_big > pw_small and pw_big > pw_medium:
            rules[sample].append({'region': 3, 'interp_membership': sl_big})
            rules[sample].append({'region': 1, 'interp_membership': sw_small})
            rules[sample].append({'region': 1, 'interp_membership': pl_small})
            rules[sample].append({'region': 3, 'interp_membership': pw_big})
            rules[sample].append({'classe': output_train_data[sample]})
        elif pl_medium > pl_small and pl_medium > pl_big:
          if pw_small > pw_medium and pw_small > pw_big:
            rules[sample].append({'region': 3, 'interp_membership': sl_big})
            rules[sample].append({'region': 1, 'interp_membership': sw_small})
            rules[sample].append({'region': 2, 'interp_membership': pl_medium})
            rules[sample].append({'region': 1, 'interp_membership': pw_small})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_medium > pw_small and pw_medium > pw_big:
            rules[sample].append({'region': 3, 'interp_membership': sl_big})
            rules[sample].append({'region': 1, 'interp_membership': sw_small})
            rules[sample].append({'region': 2, 'interp_membership': pl_medium})
            rules[sample].append({'region': 2, 'interp_membership': pw_medium})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_big > pw_small and pw_big > pw_medium:
            rules[sample].append({'region': 3, 'interp_membership': sl_big})
            rules[sample].append({'region': 1, 'interp_membership': sw_small})
            rules[sample].append({'region': 2, 'interp_membership': pl_medium})
            rules[sample].append({'region': 3, 'interp_membership': pw_big})
            rules[sample].append({'classe': output_train_data[sample]})
        elif pl_big > pl_medium and pl_big > pl_small:
          if pw_small > pw_medium and pw_small > pw_big:
            rules[sample].append({'region': 3, 'interp_membership': sl_big})
            rules[sample].append({'region': 1, 'interp_membership': sw_small})
            rules[sample].append({'region': 3, 'interp_membership': pl_big})
            rules[sample].append({'region': 1, 'interp_membership': pw_small})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_medium > pw_small and pw_medium > pw_big:
            rules[sample].append({'region': 3, 'interp_membership': sl_big})
            rules[sample].append({'region': 1, 'interp_membership': sw_small})
            rules[sample].append({'region': 3, 'interp_membership': pl_big})
            rules[sample].append({'region': 2, 'interp_membership': pw_medium})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_big > pw_small and pw_big > pw_medium:
            rules[sample].append({'region': 3, 'interp_membership': sl_big})
            rules[sample].append({'region': 1, 'interp_membership': sw_small})
            rules[sample].append({'region': 3, 'interp_membership': pl_big})
            rules[sample].append({'region': 3, 'interp_membership': pw_big})
            rules[sample].append({'classe': output_train_data[sample]})
      elif sw_medium > sw_small and sw_medium > sw_big:
        if pl_small > pl_medium and pl_small > pl_big:
          if pw_small > pw_medium and pw_small > pw_big:
            rules[sample].append({'region': 3, 'interp_membership': sl_big})
            rules[sample].append({'region': 2, 'interp_membership': sw_medium})
            rules[sample].append({'region': 1, 'interp_membership': pl_small})
            rules[sample].append({'region': 1, 'interp_membership': pw_small})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_medium > pw_small and pw_medium > pw_big:
            rules[sample].append({'region': 3, 'interp_membership': sl_big})
            rules[sample].append({'region': 2, 'interp_membership': sw_medium})
            rules[sample].append({'region': 1, 'interp_membership': pl_small})
            rules[sample].append({'region': 2, 'interp_membership': pw_medium})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_big > pw_small and pw_big > pw_medium:
            rules[sample].append({'region': 3, 'interp_membership': sl_big})
            rules[sample].append({'region': 2, 'interp_membership': sw_medium})
            rules[sample].append({'region': 1, 'interp_membership': pl_small})
            rules[sample].append({'region': 3, 'interp_membership': pw_big})
            rules[sample].append({'classe': output_train_data[sample]})
        elif pl_medium > pl_small and pl_medium > pl_big:
          if pw_small > pw_medium and pw_small > pw_big:
            rules[sample].append({'region': 3, 'interp_membership': sl_big})
            rules[sample].append({'region': 2, 'interp_membership': sw_medium})
            rules[sample].append({'region': 2, 'interp_membership': pl_medium})
            rules[sample].append({'region': 1, 'interp_membership': pw_small})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_medium > pw_small and pw_medium > pw_big:
            rules[sample].append({'region': 3, 'interp_membership': sl_big})
            rules[sample].append({'region': 2, 'interp_membership': sw_medium})
            rules[sample].append({'region': 2, 'interp_membership': pl_medium})
            rules[sample].append({'region': 2, 'interp_membership': pw_medium})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_big > pw_small and pw_big > pw_medium:
            rules[sample].append({'region': 3, 'interp_membership': sl_big})
            rules[sample].append({'region': 2, 'interp_membership': sw_medium})
            rules[sample].append({'region': 2, 'interp_membership': pl_medium})
            rules[sample].append({'region': 3, 'interp_membership': pw_big})
            rules[sample].append({'classe': output_train_data[sample]})
        elif pl_big > pl_medium and pl_big > pl_small:
          if pw_small > pw_medium and pw_small > pw_big:
            rules[sample].append({'region': 3, 'interp_membership': sl_big})
            rules[sample].append({'region': 2, 'interp_membership': sw_medium})
            rules[sample].append({'region': 3, 'interp_membership': pl_big})
            rules[sample].append({'region': 1, 'interp_membership': pw_small})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_medium > pw_small and pw_medium > pw_big:
            rules[sample].append({'region': 3, 'interp_membership': sl_big})
            rules[sample].append({'region': 2, 'interp_membership': sw_medium})
            rules[sample].append({'region': 3, 'interp_membership': pl_big})
            rules[sample].append({'region': 2, 'interp_membership': pw_medium})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_big > pw_small and pw_big > pw_medium:
            rules[sample].append({'region': 3, 'interp_membership': sl_big})
            rules[sample].append({'region': 2, 'interp_membership': sw_medium})
            rules[sample].append({'region': 3, 'interp_membership': pl_big})
            rules[sample].append({'region': 3, 'interp_membership': pw_big})
            rules[sample].append({'classe': output_train_data[sample]})
      elif sw_big > sw_small and sw_big > sw_medium:
        if pl_small > pl_medium and pl_small > pl_big:
          if pw_small > pw_medium and pw_small > pw_big:
            rules[sample].append({'region': 3, 'interp_membership': sl_big})
            rules[sample].append({'region': 3, 'interp_membership': sw_big})
            rules[sample].append({'region': 1, 'interp_membership': pl_small})
            rules[sample].append({'region': 1, 'interp_membership': pw_small})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_medium > pw_small and pw_medium > pw_big:
            rules[sample].append({'region': 3, 'interp_membership': sl_big})
            rules[sample].append({'region': 3, 'interp_membership': sw_big})
            rules[sample].append({'region': 1, 'interp_membership': pl_small})
            rules[sample].append({'region': 2, 'interp_membership': pw_medium})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_big > pw_small and pw_big > pw_medium:
            rules[sample].append({'region': 3, 'interp_membership': sl_big})
            rules[sample].append({'region': 3, 'interp_membership': sw_big})
            rules[sample].append({'region': 1, 'interp_membership': pl_small})
            rules[sample].append({'region': 3, 'interp_membership': pw_big})
            rules[sample].append({'classe': output_train_data[sample]})
        elif pl_medium > pl_small and pl_medium > pl_big:
          if pw_small > pw_medium and pw_small > pw_big:
            rules[sample].append({'region': 3, 'interp_membership': sl_big})
            rules[sample].append({'region': 3, 'interp_membership': sw_big})
            rules[sample].append({'region': 2, 'interp_membership': pl_medium})
            rules[sample].append({'region': 1, 'interp_membership': pw_small})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_medium > pw_small and pw_medium > pw_big:
            rules[sample].append({'region': 3, 'interp_membership': sl_big})
            rules[sample].append({'region': 3, 'interp_membership': sw_big})
            rules[sample].append({'region': 2, 'interp_membership': pl_medium})
            rules[sample].append({'region': 2, 'interp_membership': pw_medium})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_big > pw_small and pw_big > pw_medium:
            rules[sample].append({'region': 3, 'interp_membership': sl_big})
            rules[sample].append({'region': 3, 'interp_membership': sw_big})
            rules[sample].append({'region': 2, 'interp_membership': pl_medium})
            rules[sample].append({'region': 3, 'interp_membership': pw_big})
            rules[sample].append({'classe': output_train_data[sample]})
        elif pl_big > pl_medium and pl_big > pl_small:
          if pw_small > pw_medium and pw_small > pw_big:
            rules[sample].append({'region': 3, 'interp_membership': sl_big})
            rules[sample].append({'region': 3, 'interp_membership': sw_big})
            rules[sample].append({'region': 3, 'interp_membership': pl_big})
            rules[sample].append({'region': 1, 'interp_membership': pw_small})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_medium > pw_small and pw_medium > pw_big:
            rules[sample].append({'region': 3, 'interp_membership': sl_big})
            rules[sample].append({'region': 3, 'interp_membership': sw_big})
            rules[sample].append({'region': 3, 'interp_membership': pl_big})
            rules[sample].append({'region': 2, 'interp_membership': pw_medium})
            rules[sample].append({'classe': output_train_data[sample]})
          elif pw_big > pw_small and pw_big > pw_medium:
            rules[sample].append({'region': 3, 'interp_membership': sl_big})
            rules[sample].append({'region': 3, 'interp_membership': sw_big})
            rules[sample].append({'region': 3, 'interp_membership': pl_big})
            rules[sample].append({'region': 3, 'interp_membership': pw_big})
            rules[sample].append({'classe': output_train_data[sample]})

  return rules

# Importando dados de treinamento e dados de teste para Iris plants data set
 for i in range(10):
   train_data = pd.read_csv('https://raw.githubusercontent.com/Joacy/pgcc015-inteligencia-computacional/master/epc/epc03/iris-plants/iris-10-'+ str(i + 1) +'tra.txt', sep=',')
   test_data = pd.read_csv('https://raw.githubusercontent.com/Joacy/pgcc015-inteligencia-computacional/master/epc/epc03/iris-plants/iris-10-'+ str(i + 1) +'tst.txt', sep=',')
   
   # Separando entradas e saídas para o treinamento
   x_train = np.array(train_data.iloc[:,0:4])
   y_train_text = train_data.iloc[:,4:5]
   out_train = np.array(y_train_text)

   y_train = []
   for j in range(y_train_text.size):
      if out_train[j] == ' Iris-setosa':
        y_train.append(1)
      elif out_train[j] == ' Iris-versicolor':
        y_train.append(2)
      elif out_train[j] == ' Iris-virginica':
        y_train.append(3)

   y_train = np.array(y_train)

   # Separando entradas e saídas para o teste
   x_test = np.array(test_data.iloc[:,0:4])
   y_test_text = np.array(test_data.iloc[:,4:5])
   out_test = np.array(y_test_text)

   y_test = []
   for j in range(y_test_text.size):
      if out_test[j] == ' Iris-setosa':
        y_test.append(1)
      elif out_test[j] == ' Iris-versicolor':
        y_test.append(2)
      elif out_test[j] == ' Iris-virginica':
        y_test.append(3)

   y_test = np.array(y_test)
   
   rules = wang_mendel(x_train, y_train)
   rules_without_conflict = delete_conflict(rules)
   final_rules = filter_rules(rules_without_conflict)

   print('Fold:', i+1, '\nNúmero de Regras:', len(final_rules))
   for rule in final_rules:
     print(rule)
   print('\n')