# -*- coding: utf-8 -*-
"""epc04.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q0ayuWEbsJtEVLVebmPnDh-H14r3oDqL
"""

# Importando pandas 
import pandas as pd

# Importando numpy
import numpy as np

# Importando `StandardScaler` de `sklearn.preprocessing`
from sklearn.preprocessing import StandardScaler

def generate_empty_matrix(rows, cols):
  matrix = [];
  for i in range(rows):
    line = [];
    for j in range(cols):
      line.append(np.zeros(1)[0]);
    matrix.append(line);
  return np.array(matrix);

def add_bias(array):
  rows = array.shape[0];
  cols = array.shape[1];

  matrix = [];
  for i in range(rows):
    line = [];
    for j in range(cols + 1):
      if j == 0:
        line.append((-1) * np.ones(1)[0]);
      else:
        line.append(array[i][j-1]);
    matrix.append(line);
  return np.array(matrix);

i = 0;

train_data = pd.read_csv('https://raw.githubusercontent.com/Joacy/pgcc015-inteligencia-computacional/master/epc/epc03/iris-plants/iris-10-'+ str(i + 1) +'tra.txt', sep=',');
test_data = pd.read_csv('https://raw.githubusercontent.com/Joacy/pgcc015-inteligencia-computacional/master/epc/epc03/iris-plants/iris-10-'+ str(i + 1) +'tst.txt', sep=',');

# Separando entradas e saídas para o treinamento
x_train = train_data.iloc[:,0:4];
y_train_text = train_data.iloc[:,4:5];

# Separando entradas e saídas para o teste
x_test = test_data.iloc[:,0:4];
y_test_text = test_data.iloc[:,4:5];

# Normalização dos dados
scaler = StandardScaler().fit(x_train);

# Normalizando dados do treinamento
x_train = scaler.transform(x_train);

# Normalizando dados do teste
x_test = scaler.transform(x_test);

# Adicionando o bias como uma entrada
x_train = add_bias(x_train);
x_test = add_bias(x_test);

possible_outputs = 3;

# Codificando as saídas do treinamento e do teste
y_train = generate_empty_matrix(y_train_text.size, possible_outputs);
out_train = np.array(y_train_text);

for j in range(y_train_text.size):
  if out_train[j] == ' Iris-setosa':
    y_train[j][0] = 1;
  elif out_train[i] == ' Iris-versicolor':
    y_train[j][1] = 1;
  elif out_train[j] == ' Iris-virginica':
    y_train[j][2] = 1;
    
y_test = generate_empty_matrix(y_test_text.size, possible_outputs);
out_test = np.array(y_test_text);

for j in range(y_test_text.size):
  if out_test[j] == ' Iris-setosa':
    y_test[j][0] = 1;
  elif out_test[j] == ' Iris-versicolor':
    y_test[j][1] = 1;
  elif out_test[i] == ' Iris-virginica':
    y_test[j][2] = 1;